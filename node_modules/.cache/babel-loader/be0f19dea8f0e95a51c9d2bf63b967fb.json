{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/joykhalil/Desktop/SheCodes/weather-app-react/weather-app-react/src/WeatherForecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./WeatherForecast.css\";\nimport WeatherForecastPreview from \"./WeatherForecastPreview\";\nexport default function WeatherForecast(props) {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function handleForecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WeatherForecast row\",\n      children: [/*#__PURE__*/_jsxDEV(WeatherForecastPreview, {\n        data: forecast.list[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherForecastPreview, {\n        data: forecast.list[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherForecastPreview, {\n        data: forecast.list[2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherForecastPreview, {\n        data: forecast.list[3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherForecastPreview, {\n        data: forecast.list[4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  } else {\n    const apiKey = \"28f52080b9de7ad64256839acc8afe17\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(handleForecastResponse);\n    return null;\n  }\n}\n\n_s(WeatherForecast, \"20/pdcvQnLtcZUd5Lz9vhTDggVQ=\");\n\n_c = WeatherForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"sources":["/Users/joykhalil/Desktop/SheCodes/weather-app-react/weather-app-react/src/WeatherForecast.js"],"names":["React","useState","axios","WeatherForecastPreview","WeatherForecast","props","loaded","setLoaded","forecast","setForecast","handleForecastResponse","response","data","list","apiKey","url","city","get","then"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC7C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;;AAEA,WAASS,sBAAT,CAAgCC,QAAhC,EAA0C;AACxCF,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,MAAID,MAAJ,EAAY;AACV,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE,QAAC,sBAAD;AAAwB,QAAA,IAAI,EAAEE,QAAQ,CAACK,IAAT,CAAc,CAAd;AAA9B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,sBAAD;AAAwB,QAAA,IAAI,EAAEL,QAAQ,CAACK,IAAT,CAAc,CAAd;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,sBAAD;AAAwB,QAAA,IAAI,EAAEL,QAAQ,CAACK,IAAT,CAAc,CAAd;AAA9B;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,sBAAD;AAAwB,QAAA,IAAI,EAAEL,QAAQ,CAACK,IAAT,CAAc,CAAd;AAA9B;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,sBAAD;AAAwB,QAAA,IAAI,EAAEL,QAAQ,CAACK,IAAT,CAAc,CAAd;AAA9B;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAVD,MAUO;AACL,UAAMC,MAAM,GAAG,kCAAf;AACA,QAAIC,GAAG,GAAI,sDAAqDV,KAAK,CAACW,IAAK,UAASF,MAAO,eAA3F;AAEAZ,IAAAA,KAAK,CAACe,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAoBR,sBAApB;AAEA,WAAO,IAAP;AACD;AACF;;GA3BuBN,e;;KAAAA,e","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./WeatherForecast.css\";\nimport WeatherForecastPreview from \"./WeatherForecastPreview\";\n\nexport default function WeatherForecast(props) {\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function handleForecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    return (\n      <div className=\"WeatherForecast row\">\n        <WeatherForecastPreview data={forecast.list[0]} />\n        <WeatherForecastPreview data={forecast.list[1]} />\n        <WeatherForecastPreview data={forecast.list[2]} />\n        <WeatherForecastPreview data={forecast.list[3]} />\n        <WeatherForecastPreview data={forecast.list[4]} />\n      </div>\n    );\n  } else {\n    const apiKey = \"28f52080b9de7ad64256839acc8afe17\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n\n    axios.get(url).then(handleForecastResponse);\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}